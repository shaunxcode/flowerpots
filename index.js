// Generated by CoffeeScript 1.6.1
(function() {
  var Emitter, FlowerPots, dom;

  dom = require("dom");

  Emitter = require("emitter");

  FlowerPots = (function() {

    function FlowerPots() {
      var _this = this;
      this.path = [];
      this.el = dom("<div/>").addClass("FlowerPotContainer");
      this.topPot = dom("<div />").addClass("TopPot").appendTo(this.el);
      this.itemContainer = dom("<div />").addClass("Items").appendTo(this.el);
      this.selectedItems = dom("<div />").addClass("SelectedItems").appendTo(this.itemContainer);
      this.childrenItems = dom("<div />").addClass("ChildrenItems").appendTo(this.itemContainer);
      this.renderItem = function(item) {
        return item.name;
      };
      this.topPot.on("click", function(event) {
        _this.selectedItems.empty();
        _this.setPath([0]);
        return _this.emit("opened", _this.getParent());
      });
      this.el.on("click", ".FlowerPot > i, .FlowerPot > div", function(event) {
        return _this._handleClick(event.target.parentNode);
      });
      this.el.on("click", ".FlowerPot", function(event) {
        return _this._handleClick(event.target);
      });
    }

    FlowerPots.prototype._handleClick = function(el) {
      var hasChildren, index, itemEl, itemIndex, parent, path, _ref;
      itemEl = dom(el);
      itemIndex = parseInt(itemEl.attr("data-index"));
      parent = this.getParent();
      hasChildren = (((_ref = parent.children[itemIndex]) != null ? _ref.children : void 0) != null) || itemEl.attr("data-path");
      if (itemEl.hasClass("active")) {
        path = itemEl.attr("data-path");
        this.selectedItems.find(".FlowerPot").forEach(function(item) {
          var ipath, subEl;
          subEl = dom(item);
          ipath = subEl.attr("data-path");
          if (!ipath || ipath.length > path.length) {
            return subEl.remove();
          }
        });
        this.setPath((function() {
          var _i, _len, _ref1, _results;
          _ref1 = path.split(":");
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            index = _ref1[_i];
            _results.push(parseInt(index));
          }
          return _results;
        })());
        return this.emit("opened", this.getParent());
      } else if (hasChildren && itemEl.hasClass("selected")) {
        this.path.push(itemIndex);
        itemEl.removeClass("inactive").removeClass("selected").addClass("active").attr("data-path", this.path.join(":")).appendTo(this.selectedItems);
        this.renderChildren();
        return this.emit("opened", this.getParent());
      } else if (!itemEl.hasClass("selected")) {
        this.el.find(".selected").removeClass("selected");
        itemEl.addClass("selected");
        return this.emit("selected", itemEl, parent.children[itemIndex]);
      }
    };

    FlowerPots.prototype.setRenderItem = function(renderItem) {
      this.renderItem = renderItem;
    };

    FlowerPots.prototype.setRootLabel = function(rootLabel) {
      this.rootLabel = rootLabel;
      this.topPot.text(this.rootLabel);
      return this;
    };

    FlowerPots.prototype.setPath = function(path) {
      this.path = path;
      this.renderChildren();
      return this;
    };

    FlowerPots.prototype.setData = function(children) {
      if (children.length < 0) {
        throw new Error("Must provide array of items");
      }
      this.data = {
        children: [
          {
            children: children
          }
        ]
      };
      return this.setPath([0]);
    };

    FlowerPots.prototype.getParent = function() {
      var i, parent, _i, _len, _ref;
      parent = this.data;
      _ref = this.path;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        parent = parent.children[i];
      }
      return parent;
    };

    FlowerPots.prototype.renderChildren = function() {
      var child, index, item, parent, _i, _len, _ref;
      parent = this.getParent();
      this.childrenItems.empty();
      if (parent.children) {
        _ref = parent.children;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          item = _ref[index];
          this.childrenItems.append(child = dom("<div/>").addClass("FlowerPot").addClass("inactive").addClass(item.children ? "HasChildren" : "NoChildren").attr("data-index", index));
          child.html(this.renderItem(item));
          child.append(dom("<i />").addClass("icon-list-ul"));
        }
      }
      return this.emit("rendered");
    };

    return FlowerPots;

  })();

  Emitter(FlowerPots.prototype);

  module.exports = FlowerPots;

}).call(this);
